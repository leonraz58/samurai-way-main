{"version":3,"file":"static/js/3.3402dbe6.chunk.js","mappings":"0JACA,OAAgB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,0B,mBCMnKA,EAAc,SAACC,GACxB,OACI,gBAAKC,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,SAAC,KAAD,CAASC,GAAI,YAAYH,EAAMI,GAA/B,SAAoCJ,EAAMK,UCLzCC,EAAU,SAACN,GACpB,OACI,gBAAKC,UAAWC,EAAAA,QAAhB,SAA4BF,EAAMO,W,2DCkEpCC,GAAcC,EAAAA,EAAAA,GAAiB,IAsB/BC,GAAsBC,EAAAA,EAAAA,GAAkC,CAACC,KAAM,wBAAzCD,EApB+C,SAACX,GACxE,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACI,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUZ,KAAK,iBAAiBa,YAAY,qBAC9DC,SAAU,CAACC,EAAAA,EAAUZ,QAQzB,0BACI,4BAAQ,iB,wCC7BxB,GAAea,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KA3BtB,SAACC,GACnB,MAAO,CACHC,YAAaD,EAAMC,YACnBC,OAAQF,EAAMG,KAAKD,WAUF,SAACE,GACtB,MAAO,CAIHC,YAAa,SAACC,GACVF,GAASG,EAAAA,EAAAA,IAAcD,SAS/BE,EAAAA,GACAC,EAAAA,EAFJ,EDjCuB,SAAChC,GAERA,EAAMwB,YAAlB,IAEIS,EAAkBjC,EAAMwB,YAAYU,QAAQC,KAAI,SAAAC,GAAM,OAAI,SAACrC,EAAD,CAAaM,KAAM+B,EAAO/B,KAAMD,GAAIgC,EAAOhC,QAErGiC,EAAmBrC,EAAMwB,YAAYc,SAASH,KAAI,SAAAI,GAAC,OAAI,SAACjC,EAAD,CAASC,QAASgC,EAAEhC,aAmB/E,OADAiC,MAAMxC,EAAMyB,SACS,IAAjBzB,EAAMyB,QACC,SAAC,KAAD,CAAUtB,GAAI,YAIrB,iBAAKF,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,aAAhB,SACK+B,KAEL,gBAAKhC,UAAWC,EAAAA,SAAhB,UACI,yBAAMmC,OAEV,SAAC3B,EAAD,CAAqBG,SAnBP,SAAC4B,GACnBD,MAAMC,EAAOZ,gBACb7B,EAAM4B,YAAYa,EAAOZ","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__UySJR\",\"dialogsItems\":\"Dialogs_dialogsItems__7N9pN\",\"active\":\"Dialogs_active__1TjUN\",\"messages\":\"Dialogs_messages__f6ll8\",\"message\":\"Dialogs_message__IP8pB\"};","import s from \"../Dialogs.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogsItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport const DialogsItem = (props: DialogsItemPropsType) => {\r\n    return(\r\n        <div className={s.dialog + ' ' + s.active}>\r\n            <NavLink to={\"/dialogs/\"+props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import s from \"../Dialogs.module.css\";\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\nexport const Message = (props:MessagePropsType) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}","import s from './Dialogs.module.css'\r\nimport {DialogsItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {\r\n\r\n    dialogsPageType,\r\n    dialogsType,\r\n    messagesType,\r\n\r\n\r\n} from \"../../redux/state\";\r\nimport React, {ChangeEvent} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n    updateNewMessageBody: (body: string) => void\r\n    sendMessage: (newMessageBody: string) => void\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n    //dialogsPageState: dialogsPageType\r\n    //dispatch: (action: ActionsTypes) => void\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(dialog => <DialogsItem name={dialog.name} id={dialog.id}/>)\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message}/>)\r\n    //let newMessageBody = props.dialogsPage.newMessageBody\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage()\r\n    // }\r\n    //\r\n    // let onNewMessageChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    //     let body = e.target.value\r\n    //     props.updateNewMessageBody(body)\r\n    //     //props.dispatch(updateNewMessageBodyAC(body))\r\n    // }\r\n\r\n    const addNewMessage = (values: AddMessageFormDataType) => {\r\n        alert(values.newMessageBody)\r\n        props.sendMessage(values.newMessageBody)\r\n\r\n    }\r\n\r\n    alert(props.isAuth)\r\n    if (props.isAuth === false) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<AddMessageFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                validate={[required, maxLength50]}\r\n                />\r\n                {/*<textarea*/}\r\n                {/*    value={newMessageBody}*/}\r\n                {/*    placeholder={\"Enter your message\"}*/}\r\n                {/*    onChange={onNewMessageChange}*/}\r\n                {/*></textarea>*/}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormDataType>({form: \"dialogAddMessageForm\"}) (AddMessageForm)\r\n","import s from './Dialogs.module.css'\r\nimport {DialogsItem} from \"./DialogItem/DialogItem\";\r\nimport {Message} from \"./Message/Message\";\r\nimport {\r\n\r\n    dialogsPageType,\r\n    dialogsType,\r\n    messagesType, profilePageType,\r\n\r\n\r\n} from \"../../redux/state\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {compose, Dispatch, EmptyObject, Store} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {sendMessageAC, updateNewMessageBodyAC} from \"../../redux/dialogs-reducer\";\r\nimport React from \"react\";\r\nimport {getUserProfileTC} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\ntype DialogsPropsType = {\r\n    //dialogsPageState: dialogsPageType\r\n    //dispatch: (action: ActionsTypes) => void\r\n    //store: Store<EmptyObject & { dialogsPage: dialogsPageType; profilePage: profilePageType }, ActionsTypes>,\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: dialogsPageType\r\n    isAuth: boolean\r\n}\r\nlet mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n   // updateNewMessageBody: (body: string) => void,\r\n    sendMessage: (newMessageBody: string) => void\r\n}\r\n\r\nexport type DialogsContainerType = MapDispatchPropsType & MapStatePropsType\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        // updateNewMessageBody: (body: string) => {\r\n        //     dispatch(updateNewMessageBodyAC(body))\r\n        // },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n//export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["DialogsItem","props","className","s","to","id","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","connect","state","dialogsPage","isAuth","auth","dispatch","sendMessage","newMessageBody","sendMessageAC","withRouter","withAuthRedirect","dialogsElements","dialogs","map","dialog","messagesElements","messages","m","alert","values"],"sourceRoot":""}